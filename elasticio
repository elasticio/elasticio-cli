#!/usr/bin/env node

const program = require('caporal');
const fs = require('fs');
const { runProcess } = require('./lib/executables/process');
const { runExec } = require('./lib/executables/exec');
const { runValidate } = require('./lib/executables/validate');

const { version } = JSON.parse(fs.readFileSync(`${__dirname}/package.json`, 'utf8'));

program
  .version(version);

program
  .command('cmp:process', 'Run the process function of an action/trigger')
  .argument('<path>', 'Path to component folder')
  .argument('[fixture]', 'Fixture to run against')
  .argument('[action]', 'Name of action/trigger to run')
  .action(async (args) => {
    const { path, fixture, action } = args;
    await runProcess(path, fixture, action);
  });

program
  .command('cmp:exec', 'Run any exposed function from a file, including verifyCredentials')
  .argument('[path]', 'Path to component folder,  defaults to current directory', null, process.cwd())
  .option('-x, --fixture [fixture]', 'Fixture to run against')
  .option('-f, --function [func]', 'Function name to run')
  .option('-a, --action [action]', 'Name of action/trigger to run')
  .action(async (args, options) => {
    const { fixture, action } = options;
    const func = options.function;
    const { path } = args;
    await runExec(path, func, fixture, action);
  });

program
  .command('cmp:validate', 'Validate component.json, action/trigger files, and any static schemas')
  .argument('[path]', 'Path to component folder', null, process.cwd())
  .action(async (args) => {
    await runValidate(args.path);
  });

program.parse(process.argv);
